// <auto-generated />
using System;
using Fitness.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chat.Migrations
{
    [DbContext(typeof(FitnessDbContext))]
    [Migration("20210609201652_soundUrl")]
    partial class soundUrl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chat.Models.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("MainUserId");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MainUserId");

                    b.ToTable("Visitor");
                });

            modelBuilder.Entity("Fitness.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("ChargingLevelId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DateBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FulName")
                        .IsRequired();

                    b.Property<int>("Gender");

                    b.Property<string>("ImgUrl");

                    b.Property<int>("InterstedWith");

                    b.Property<int?>("LevelId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("OtherLevelId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("ReceiveChatRoomMsg");

                    b.Property<bool>("ReceiveInvitation");

                    b.Property<bool>("ReceiveMsg");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Tower");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("about");

                    b.Property<DateTime>("blockedStartDate");

                    b.Property<int>("days");

                    b.Property<bool>("userblocked");

                    b.HasKey("Id");

                    b.HasIndex("ChargingLevelId");

                    b.HasIndex("LevelId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OtherLevelId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Fitness.Models.Background", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgUrl");

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("createDate");

                    b.HasKey("Id");

                    b.ToTable("Background");
                });

            modelBuilder.Entity("Fitness.Models.BlockUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("blockedUserId");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("blockedUserId");

                    b.ToTable("BlockUser");
                });

            modelBuilder.Entity("Fitness.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatName")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Fitness.Models.ChargingLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BalanceCount")
                        .HasColumnType("int");

                    b.Property<string>("Color");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("ChargingLevel");
                });

            modelBuilder.Entity("Fitness.Models.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("BackgroundId");

                    b.Property<decimal>("Balancea");

                    b.Property<int>("ChatRoomCategoryId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("CustomBackground");

                    b.Property<DateTime>("CustomBackgroundAdd");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OptionalPassword");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ChatRoom");
                });

            modelBuilder.Entity("Fitness.Models.ChatRoomCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("ImgUrl");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ChatRoomCategory");
                });

            modelBuilder.Entity("Fitness.Models.ChatRoomFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("ChatRoomId");

                    b.Property<DateTime>("FollowingDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("ChatRoomFollower");
                });

            modelBuilder.Entity("Fitness.Models.ChatRoomMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("BannedDate");

                    b.Property<DateTime>("BlockDate");

                    b.Property<int>("BlockedTime");

                    b.Property<int>("ChatRoomId");

                    b.Property<DateTime>("InviteDate");

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsBloked");

                    b.Property<bool>("IsExist");

                    b.Property<bool>("IsInvited");

                    b.Property<DateTime>("JoinDate");

                    b.Property<int>("MemberType");

                    b.Property<int>("MicId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("ChatRoomMember");
                });

            modelBuilder.Entity("Fitness.Models.ChatRoomMsg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatRoomId");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsRadio");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(Max)");

                    b.Property<DateTime>("SendDate");

                    b.Property<string>("SenderId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatRoomMsg");
                });

            modelBuilder.Entity("Fitness.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("CommentBody");

                    b.Property<int>("PostId");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Fitness.Models.ConnectionIdTbl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("ConnectionId");

                    b.HasKey("Id");

                    b.ToTable("ConnectionIdTbl");
                });

            modelBuilder.Entity("Fitness.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Fitness.Models.Emosion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgUrl");

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("createDate");

                    b.HasKey("Id");

                    b.ToTable("Emosion");
                });

            modelBuilder.Entity("Fitness.Models.FestivalBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<bool>("Approve");

                    b.Property<string>("DaysCount")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("MainImage")
                        .HasColumnType("nvarchar(420)");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(Max)");

                    b.Property<bool>("Refused");

                    b.Property<int>("RoomId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FestivalBanner");
                });

            modelBuilder.Entity("Fitness.Models.FollowUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("FollowedUserId");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FollowedUserId");

                    b.ToTable("FollowUser");
                });

            modelBuilder.Entity("Fitness.Models.Gift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("DaysCount");

                    b.Property<string>("GiftName")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReceived");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("nvarchar(550)");

                    b.Property<string>("SoundUrl");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Gift");
                });

            modelBuilder.Entity("Fitness.Models.HelpCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("create_at");

                    b.Property<string>("details");

                    b.Property<string>("issueTitle");

                    b.Property<int>("issueid");

                    b.Property<string>("phoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("HelpCenter");
                });

            modelBuilder.Entity("Fitness.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<int>("GiftSendCount")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("Fitness.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("PostId");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("Fitness.Models.MainBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Img1")
                        .HasColumnType("nvarchar(420)");

                    b.Property<string>("Img2")
                        .HasColumnType("nvarchar(420)");

                    b.Property<string>("Img3")
                        .HasColumnType("nvarchar(420)");

                    b.Property<string>("Img4")
                        .HasColumnType("nvarchar(420)");

                    b.Property<string>("MainImage")
                        .HasColumnType("nvarchar(420)");

                    b.Property<string>("actions")
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("MainBanner");
                });

            modelBuilder.Entity("Fitness.Models.MicClosedState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatRoomId");

                    b.Property<int>("MicId");

                    b.HasKey("Id");

                    b.ToTable("MicClosedState");
                });

            modelBuilder.Entity("Fitness.Models.Music", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("ChatRoomId");

                    b.Property<string>("MusicName");

                    b.HasKey("Id");

                    b.ToTable("Music");
                });

            modelBuilder.Entity("Fitness.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("Create_at");

                    b.Property<string>("Desc");

                    b.Property<string>("NewUserId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NewUserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Fitness.Models.OtherLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<int>("GiftRecieverCount")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LevelName")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("OtherLevel");
                });

            modelBuilder.Entity("Fitness.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("publishDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Fitness.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("DaysCount");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnType("nvarchar(550)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Fitness.Models.Rollet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("ChatRoomId");

                    b.Property<DateTime>("Create_at");

                    b.Property<bool>("IsBegin");

                    b.Property<bool>("IsFinished");

                    b.Property<int>("MemberCount");

                    b.Property<decimal>("SubscribtionValue");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("Rollet");
                });

            modelBuilder.Entity("Fitness.Models.RolletMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<bool>("IsLoser");

                    b.Property<bool>("IsWinner");

                    b.Property<int>("RolletId");

                    b.Property<DateTime>("create_at");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RolletId");

                    b.ToTable("RolletMember");
                });

            modelBuilder.Entity("Fitness.Models.SiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Buy100Diamond")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ConvertGift2Diamond")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("CustomBackgroundPrice");

                    b.Property<decimal>("FestivalBannerPrice");

                    b.Property<decimal>("PostPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("UserIdPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("SiteSetting");
                });

            modelBuilder.Entity("Fitness.Models.User2UserMsg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName");

                    b.Property<bool>("IsAdminstationMsg");

                    b.Property<bool>("IsSeen");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(Max)");

                    b.Property<string>("RecieverId");

                    b.Property<DateTime?>("SeenDate");

                    b.Property<DateTime>("SendDate");

                    b.Property<string>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("User2UserMsg");
                });

            modelBuilder.Entity("Fitness.Models.UserGift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("DaysCount");

                    b.Property<int>("GiftId")
                        .HasColumnType("int");

                    b.Property<string>("NewUserId");

                    b.Property<bool>("Used");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GiftId");

                    b.HasIndex("NewUserId");

                    b.ToTable("UserGift");
                });

            modelBuilder.Entity("Fitness.Models.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("ImgUrl");

                    b.Property<DateTime>("create_at");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserImage");
                });

            modelBuilder.Entity("Fitness.Models.UserImageLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("LikerId");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LikerId");

                    b.ToTable("UserImageLike");
                });

            modelBuilder.Entity("Fitness.Models.UserProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("DaysCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsReceived");

                    b.Property<string>("NewUserId");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Used");

                    b.Property<DateTime>("date");

                    b.Property<DateTime>("deleteDate");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NewUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProduct");
                });

            modelBuilder.Entity("Fitness.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("DiamonadBalance");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Chat.Models.Visitor", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "MainUser")
                        .WithMany()
                        .HasForeignKey("MainUserId");
                });

            modelBuilder.Entity("Fitness.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.HasOne("Fitness.Models.ChargingLevel", "ChargingLevel")
                        .WithMany("Users")
                        .HasForeignKey("ChargingLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fitness.Models.Level", "Level")
                        .WithMany("Users")
                        .HasForeignKey("LevelId");

                    b.HasOne("Fitness.Models.OtherLevel", "OtherLevel")
                        .WithMany("Users")
                        .HasForeignKey("OtherLevelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.BlockUser", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "blockedUser")
                        .WithMany()
                        .HasForeignKey("blockedUserId");
                });

            modelBuilder.Entity("Fitness.Models.ChatRoom", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Fitness.Models.ChatRoomFollower", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Models.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.ChatRoomMember", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Models.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.ChatRoomMsg", b =>
                {
                    b.HasOne("Fitness.Models.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Fitness.Models.Comment", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.FestivalBanner", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Fitness.Models.FollowUser", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "FollowedUser")
                        .WithMany()
                        .HasForeignKey("FollowedUserId");
                });

            modelBuilder.Entity("Fitness.Models.Gift", b =>
                {
                    b.HasOne("Fitness.Models.Category", "Category")
                        .WithMany("gifts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.HelpCenter", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Fitness.Models.Like", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.Notification", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "NewUser")
                        .WithMany()
                        .HasForeignKey("NewUserId");
                });

            modelBuilder.Entity("Fitness.Models.Post", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("posts")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Fitness.Models.Product", b =>
                {
                    b.HasOne("Fitness.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.Rollet", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Models.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.RolletMember", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Models.Rollet", "Rollet")
                        .WithMany()
                        .HasForeignKey("RolletId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.User2UserMsg", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverId");

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Fitness.Models.UserGift", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Models.Gift", "Gift")
                        .WithMany()
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "NewUser")
                        .WithMany()
                        .HasForeignKey("NewUserId");
                });

            modelBuilder.Entity("Fitness.Models.UserImage", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("UserImage")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Fitness.Models.UserImageLike", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "Liker")
                        .WithMany()
                        .HasForeignKey("LikerId");
                });

            modelBuilder.Entity("Fitness.Models.UserProduct", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "NewUser")
                        .WithMany()
                        .HasForeignKey("NewUserId");

                    b.HasOne("Fitness.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fitness.Models.Wallet", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser", "ApplicationUser")
                        .WithMany("wallet")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fitness.Areas.Identity.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
